//#include <iostream>
//#include <thread>
//using namespace std;
//线程是程序的最小执行单位，进程是操作系统中最小的资源分配单位
//每个进程对应一个虚拟地址空间，一个进程只能抢占一个CPU时间片
//线程的上下文切换比进程要快的多
// 进程/线程分时复用CPU时间片，再切换之前会将上一个任务的状态进行保存，下次切换回这个任务的时候，加载这个状态继续运行，任务从保存到再次加载这个过程就是一次上下文切换

//void hello(){
//    cout<<"Hello concurrent world\n";
//}
//创建的线程需要从一个函数开始（初始函数）

//int main(){
//
//    thread t(hello); //hello可调用对象
//    //t.join(); //阻塞主线程，主线程等待子线程程序执行完毕
//    //t.detach();
//    cout<<"Hello!"<< endl;
//    //detach() 传统多线程程序主线程要等待子程序执行完毕
//    //分离主线程不和子线程汇合，主线程可以先结束
//    //创建了很多子线程，让主线程逐个等待子线程结束，所以引入了detach()
//    //detach()之后thread对象和主线程失联，子线程会驻留在后台运行，相当于背C++运行时库接管，当子线程执行完成后，由运行时库负责清理该线程相关资源
//
//    //joinable() 判断是否可以成功使用join或detach return True/False
//
//    return 0;
//}